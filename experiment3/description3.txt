ADMIN DASHBOARD – STRUCTURE, THEME TOGGLE & CHECKS

1. SECTION: Header (<header>)
    Requirement: I needed to create a header that displays "Admin Dashboard" at the top, with a Dark Mode checkbox positioned on the right side.
VALID CHECKS:
     - I confirmed the title text renders clearly and is readable.
     - I made sure the checkbox is clickable and properly positioned inside the header area.
POSSIBLE ISSUES:
     - During testing, I checked for missing title or improper checkbox alignment.

2. SECTION: Navigation (<nav> inside <aside>)
    Requirement: I implemented a simple list of links (Home, Users, Settings) within a <nav> element, which I wrapped in an <aside> to create the left sidebar.
VALID CHECKS:
     - I verified links are visible with the required styling (underlined purple in light mode).
     - I ensured the <nav> element exists and follows semantic HTML standards.
POSSIBLE ISSUES:
     - I checked that <nav> wasn't missing and links were properly grouped.

3. SECTION: Main Content (acts like <main>)
    Requirement: I created a section that displays a welcome heading and a short paragraph.
    Note: For this experiment, I used <div class="main"> as a grid container, though I learned that a dedicated <main> tag would be more semantically correct for the primary content area.
VALID CHECKS:
     - I included the heading text: "Welcome, Admin!" as required.
     - I added a paragraph explaining that charts/tables/reports could be placed here.
POSSIBLE ISSUES:
     - I watched for missing content or insufficient spacing.

4. SECTION: Footer (<footer>)
    Requirement: I designed the footer to stay at the bottom with the same color styling as the header.
VALID CHECKS:
     - I made sure the footer touches the bottom edge without any white gaps.
     - I included the text: © 2025 Admin Panel.
POSSIBLE ISSUES:
     - I checked for unwanted gaps or incorrect background colors.

5. THEME TOGGLE (CSS‑only)
    Requirement: I implemented theme switching without JavaScript, using CSS variables and the :has() selector with a checkbox.
VALID STATES:
     - Light (unchecked): I set green header/footer, white page background, and light gray sidebar.
     - Dark (checked): I changed to dark gray header/footer, near‑black page background, and darker sidebar, ensuring text remained readable.
POSSIBLE ISSUES:
     - I tested that colors changed correctly and maintained good contrast for readability.


CSS Styling Breakdown: A Structured Overview

1. ELEMENT: body (Page Background & Base Font)
     Purpose: I used this to establish the background, text color, and base font.
     Properties:
     background: var(--page-bg);
     color: var(--text);
     font-family: Arial, sans-serif;

2. ELEMENT: .app (Page Wrapper)
     Purpose: I created a column layout to ensure the footer sticks to the bottom.
     Properties:
     display: flex; flex-direction: column; min-height: 100vh;

3. ELEMENT: .topbar (Header Bar)
     Purpose: I designed this to hold the title and theme toggle.
     Properties:
     background: var(--topbar-bg); color: var(--topbar-text);
     display: flex; align-items: center; justify-content: space-between; padding: 10px 12px;

4. ELEMENT: .main (Grid Layout Area)
     Purpose: I implemented a two‑column layout with left sidebar and main content.
     Properties:
     display: grid; grid-template-columns: 160px 1fr; flex: 1;
     Learning: This was my first time using CSS Grid. I learned that grid-template-columns allows me to set a fixed width for the sidebar while giving flexible space to the content.

5. ELEMENT: .side (Sidebar with <nav>)
     Purpose: I styled this as a visual strip containing navigation links.
     Properties:
     background: var(--side-bg); padding: 14px 12px; with underlined links.

6. ELEMENT: .content (Main Text Area)
     Purpose: I structured this to contain the heading and paragraph.
     Properties:
     padding: 20px 18px; h2 has margin-top; paragraph uses a muted color.

7. ELEMENT: .bottombar (Footer Bar)
     Purpose: I created a bottom bar containing the copyright information.
     Properties:
     text-align: center; padding: 8px 12px; background: var(--topbar-bg); color: var(--topbar-text); margin-top: auto;

8. THEME VARIABLES & SELECTOR (Theme System)
     Purpose: I implemented color switching without JavaScript.
     Properties:
     :root { --topbar-bg, --page-bg, --side-bg, --text, --muted }
     :root:has(#themeToggle:checked) { overrides the variables for the dark theme }
     Extra: I styled the checkbox with accent-color for a simple blue tick.


LEARNING OUTCOMES:
1. I practiced using semantic HTML elements like <header>, <nav> (inside <aside>), a main content region, and <footer>. I learned that a dedicated <main> tag would have been better for the primary content, even though my wrapper div worked adequately.
2. I applied CSS Grid for the layout structure. This helped me understand how grid-template-columns divides space between fixed and flexible columns.
3. I successfully implemented a theme switch using only CSS through custom properties and the :has() selector to react to the checkbox state.
4. I learned how to keep the footer at the bottom by using a flex column wrapper with flex: 1 for the middle section.
5. I incorporated accessibility basics by adding an aria-label to the nav, ensuring good text contrast in both themes, and creating a page structure that's more accessible to screen readers.