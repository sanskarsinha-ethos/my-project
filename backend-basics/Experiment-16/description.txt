DESCRIPTION OF EXPERIMENT:




A. Authentication Middleware:


function authMiddleware(req, res, next) {
  const authHeader = req.headers['authorization'];
  if (!authHeader) {
    return res.status(401).json({ message: 'Authorization header missing' });
  }
  const parts = authHeader.split(' ');
  if (parts.length !== 2 || parts[0] !== 'Bearer') {
    return res.status(400).json({ message: 'Invalid Authorization format. Use Bearer <token>' });
  }
  const token = parts[1];
  if (token === 'mysecrettoken') {
    next();
  } else {------------------------------------------------------------------------------------------------------------> CODE BLOCK
    res.status(403).json({ message: 'Forbidden - Invalid token' });
  }
}



EXPLANATION :

1. This is the custom authentication middleware.

2. It checks if the request contains an Authorization header.

3. The expected format is:

Authorization: Bearer mysecrettoken


4. The middleware splits the header and extracts the token.

5. If the token matches mysecrettoken, the request proceeds (next() is called).

6. Otherwise, it returns an error response — either 401, 400, or 403.
 


B. Logging Middleware : 

app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
  next();
});--------------------------------------------------------------------------------------------> CODE BLOCK



EXPLANATION:

1. This middleware runs for every incoming request.

2. It logs:

a.  The timestamp

b. The HTTP method (GET, POST, etc.)

c. The requested URL

This is very useful for debugging and tracking request activity on your server.




C. CRUD Routes for Users : 


app.post('/users', (req, res) => {
  const user = req.body;
  users.push(user);
  res.status(201).json({ message: 'User added', user });
});

app.get('/users', (req, res) => {
  res.status(200).json(users);
});-------------------------------------------------------------------------------------------> CODE BLOCK

app.put('/users/:id', (req, res) => {
  const id = req.params.id;
  const updatedUser = req.body;
  users = users.map(user => (user.id === id ? updatedUser : user));
  res.status(200).json({ message: 'User updated', updatedUser });
});

app.delete('/users/:id', (req, res) => {
  const id = req.params.id;
  users = users.filter(user => user.id !== id);
  res.status(200).json({ message: 'User deleted' });
});


EXPLANATION:

1. These are your public REST API routes for user management:

2. POST → Add a new user

3. GET → Retrieve all users

4. PUT → Update an existing user by ID

5. DELETE → Remove a user by ID

6. These routes don’t require authentication and can be used freely.




D. ROUTE.JS :


import express from 'express';
const router = express.Router();

router.use((req, res, next) => {
  console.log('Admin router middleware executed');
  next();
});

router.get('/dashboard', (req, res) => {
  res.send('Welcome to the Admin Dashboard!');
});----------------------------------------------------------------------------------> CODE BLOCK

export default router;



EXPLANATION:


1. This defines a separate admin router module:

2. Logs when an admin route is accessed.

3. Defines a /dashboard route that returns a message — but only if the Bearer token is valid.

4. It’s imported into server.js and used under /admin.





When testing your /admin/dashboard route in Postman:

Set Authorization Type → Bearer Token

Enter token value:

mysecrettoken


If valid → you’ll see:

Welcome to the Admin Dashboard!


If invalid or missing → you’ll see:

{ "message": "Forbidden - Invalid token" }
